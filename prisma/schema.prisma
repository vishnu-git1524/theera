// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    extensions = [vector]
}

model User{
    id       String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    firstName String?
    lastName  String?
    emailAddress     String   @unique
    imageUrl String?
    credits Int @default(150)

    UserToProject UserToProject[]

    Question Question[]

    Note Note[]

    transaction Transaction[]

    Bug Bug[]

    Analyze Analyze[]
}

model Project{
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    name String
    githubUrl String

    deletedAt DateTime?

    UserToProject UserToProject[]

    Commit Commit[]

    SourceCodeEmbedding SourceCodeEmbedding[]

    Question Question[]

    Note Note[]

    meetings Meeting[]

    Bug Bug[]

    Analyze Analyze[]
}

model UserToProject{
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    projectId String

    user User @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    isAdmin Boolean @default(false)

    @@unique([userId, projectId])

}

model Commit{
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    projectId String
    project Project @relation(fields: [projectId], references: [id])
    commitHash String
    commitMessage String
    commitAuthorName String
    commitAuthorAvatar String
    commitDate DateTime
    summary String
}

model SourceCodeEmbedding{
    id String @id @default(cuid())

    summaryEmbedding Unsupported("vector(768)")?
    sourceCode String
    fileName String
    summary String

    projectId String
    project Project @relation(fields: [projectId], references: [id])


}

model Question {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  question      String
  answer        String
  filesReferences Json?

  projectId     String
  project       Project @relation(fields: [projectId], references: [id])

  userId        String
  user          User    @relation(fields: [userId], references: [id])
}

model Note {
    id              String   @id @default(cuid())
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    content         String

    projectId       String
    project         Project @relation(fields: [projectId], references: [id])

    userId          String
    user            User    @relation(fields: [userId], references: [id])
}

model Transaction{
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userId String
    user User @relation(fields: [userId], references: [id])
    credits Int
}

model Meeting {
    id   String @id @default(cuid())
    meetingurl  String
    name String

    projectId String
    project   Project @relation(fields: [projectId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    status MeetingStatus @default(PROCESSING)

    issues Issue[]
}

model Issue {
    id       String @id @default(cuid())
    start    String
    end      String
    gist     String
    headline String
    summary  String

    meetingId String
    meeting   Meeting @relation(fields: [meetingId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Bug {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    title       String
    description String
    status      BugStatus @default(PENDING)

    projectId   String
    project     Project @relation(fields: [projectId], references: [id])

    userId      String
    user        User    @relation(fields: [userId], references: [id])
}

model Analyze {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  answer        String
  
  projectId     String
  project       Project @relation(fields: [projectId], references: [id])

  userId        String
  user          User    @relation(fields: [userId], references: [id])
}


enum BugStatus {
    PENDING
    FIXED
}


enum MeetingStatus{
    PROCESSING
    COMPLETED
}